name: "Docs check"
# https://github.com/marketplace/actions/sphinx-build

on:
- pull_request

jobs:

  test-docs:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Note: This uses an internal pip API and may not always work
      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt -U -f https://download.pytorch.org/whl/cpu/torch_stable.html -q --use-feature=2020-resolver
          pip install -r requirements/docs.txt --use-feature=2020-resolver
          python --version ; pip --version ; pip list
        shell: bash

      - name: Test Documentation
        env:
          SPHINX_MOCK_REQUIREMENTS: 0
        working-directory: ./docs
        run: |
          # First run the same pipeline as Read-The-Docs
          apt-get update && sudo apt-get install -y cmake
          make doctest
          make coverage

  make-docs:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Note: This uses an internal pip API and may not always work
      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements/docs.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt -U -f https://download.pytorch.org/whl/torch_stable.html -q --use-feature=2020-resolver
          pip install -r requirements/docs.txt --use-feature=2020-resolver
          # install Texlive, see https://linuxconfig.org/how-to-install-latex-on-ubuntu-20-04-focal-fossa-linux
          sudo apt-get update
          sudo apt-get install -y texlive-latex-extra dvipng texlive-pictures
          python --version
          pip --version
          pip list
        shell: bash

      - name: Make Documentation
        # First run the same pipeline as Read-The-Docs
        working-directory: ./docs
        run: |
          make clean
          make html --debug --jobs 2 SPHINXOPTS="-W --keep-going" -b linkcheck

      - name: Upload built docs
        uses: actions/upload-artifact@v2
        with:
          name: docs-build
          path: docs/build/
        if: always()

  paper-JOSS:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build draft PDF
        uses: openjournals/openjournals-draft-action@master
        with:
          journal: joss
          # This should be the path to the paper within your repo.
          paper-path: ./docs/paper_JOSS/paper.md
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          name: JOSS paper
          # This is the output path where Pandoc will write the compiled
          # PDF. Note, this should be the same directory as the input paper.md
          path: ./docs/paper_JOSS/paper.pdf
