name: PyTorch & Conda

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: [master, "release/*"]
  pull_request:
    branches: [master, "release/*"]

jobs:
  conda:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        pytorch-version: ["1.4", "1.5", "1.6", "1.7", "1.8", "1.9", "1.10", "1.11"]
        include:
          - python-version: 3.7
            pytorch-version: '1.3'
    env:
      PYTEST_ARTEFACT: test-conda-py${{ matrix.python-version }}-pt${{ matrix.pytorch-version }}.xml
      TRANSFORMERS_CACHE: .cache/huggingface/

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 55
    steps:
    - uses: actions/checkout@v2

    - run: echo "::set-output name=period::$(python -c 'import time ; days = time.time() / 60 / 60 / 24 ; print(int(days / 7))' 2>&1)"
      id: times

    - name: Cache conda
      uses: actions/cache@v2
      with:
        path: ~/conda_pkgs_dir
        key: conda-py${{ matrix.python-version }}-pt${{ matrix.pytorch-version }}-td${{ steps.times.outputs.period }}
        restore-keys: conda-py${{ matrix.python-version }}-pt${{ matrix.pytorch-version }}-td${{ steps.times.outputs.period }}

    # Add another cache for Pip as not all packages lives in Conda env
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-py${{ matrix.python-version }}-pt${{ matrix.pytorch-version }}-td${{ steps.times.outputs.period }}-${{ hashFiles('requirements/base.txt') }}
        restore-keys: pip-py${{ matrix.python-version }}-pt${{ matrix.pytorch-version }}-td${{ steps.times.outputs.period }}-

    # https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf
    # https://gist.github.com/mwouts/9842452d020c08faf9e84a3bba38a66f
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest
        use-mamba: true
        # miniconda-version: "4.7.12"
        python-version: ${{ matrix.python-version }}
        channels: pytorch,pytorch-test,pytorch-nightly,conda-forge
        channel-priority: true
        # auto-activate-base: true
        # environment-file: ./environment.yml
        use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      # prevent hanging Conda creations
      timeout-minutes: 10

    - name: HF cache
      uses: actions/cache@v2
      with:
        path: $TRANSFORMERS_CACHE
        key: cache-transformers

    - name: Temp COCO env. fix
      if: matrix.pytorch-version == '1.4'
      run: |
        pip install -q "numpy==1.20.0"  # try to fix cocotools for PT 1.4

    - name: Update Environment
      run: |
        sudo apt install libsndfile1
        conda info
        conda install cpuonly mkl pytorch=${{ matrix.pytorch-version }} packaging
        conda install cpuonly $(python ./requirements/adjust-versions.py conda)
        conda install ffmpeg
        conda list
        pip --version
        python ./requirements/adjust-versions.py requirements.txt
        python ./.github/prune-packages.py requirements/image.txt torchvision
        pip install --requirement requirements.txt --quiet
        pip install --requirement requirements/test.txt --quiet
        pip list
        python -c "from torch import __version__ as ver; assert '.'.join(ver.split('.')[:2]) == '${{ matrix.pytorch-version }}', ver"
      shell: bash -l {0}

    - name: Testing
      run: |
        # NOTE: run coverage on tests does not propagare faler status for Win, https://github.com/nedbat/coveragepy/issues/1003
        python -m pytest torchmetrics tests -v --durations=50 --junitxml=$PYTEST_ARTEFACT
      shell: bash -l {0}

    - name: Upload pytest test results
      uses: actions/upload-artifact@master
      with:
        name: $PYTEST_ARTEFACT
        path: $PYTEST_ARTEFACT
      # Use always() to always run this step to publish test results when there are test failures
      if: failure()
